// src/mock/getInfo.ts
import Mock from "mockjs";
var getInfo_default = [
  {
    url: "/api/getInfo",
    method: "get",
    response: () => {
      return {
        code: 200,
        data: Mock.mock([
          {
            label: "String",
            value: "@csentence(5, 50)"
          },
          {
            label: "Integer",
            value: { "number|1-1000": 100 }
          },
          {
            label: "Boolean",
            value: {
              "boolean|1-2": true
            }
          },
          {
            label: "Array",
            value: {
              "PersonList|11": [
                {
                  name: "@cname",
                  "age|12-80": 12,
                  list1: "@csentence(5, 25)",
                  list2: Mock.mock({
                    "number|1-100": 100
                  }),
                  "list3|2-4": [
                    {
                      "item|1": "@csentence(5, 25)"
                    }
                  ]
                }
              ]
            }
          },
          {
            label: "Object",
            value: {
              \u5E03\u5C14\u503C: Mock.Random.boolean(),
              \u6574\u6570: Mock.Random.integer(100, 100293),
              \u5C0F\u6570: Mock.Random.float(1, 34322, 0, 0.234),
              \u5B57\u7B26\u4E32: Mock.Random.string(25),
              \u82F1\u6587\u540D: Mock.Random.name(),
              \u4E2D\u6587\u540D: Mock.Random.cname(),
              \u65E5\u671F: Mock.Random.date(),
              \u65F6\u95F4: Mock.Random.time()
            }
          },
          {
            label: "Number",
            value: {
              "number|123.1-10": 1
            }
          },
          {
            label: "Null",
            value: ""
          },
          {
            label: "Any",
            value: "@paragraph()"
          }
        ]),
        message: "\u83B7\u53D6\u6570\u636E\u6210\u529F\uFF01",
        info: ""
      };
    }
  },
  {
    url: "/api/getString",
    method: "get",
    response: () => {
      return {
        code: 200,
        data: Mock.mock("@csentence(5, 50)"),
        info: ""
      };
    }
  },
  {
    url: "/api/getInteger",
    method: "get",
    response: () => {
      return {
        code: 200,
        data: Mock.mock({
          "number|1-1000": 100
        }),
        info: ""
      };
    }
  },
  {
    url: "/api/getBoolean",
    method: "get",
    response: () => {
      return {
        code: 200,
        data: Mock.mock({
          "boolean|1-2": true
        }),
        info: ""
      };
    }
  },
  {
    url: "/api/getArray",
    method: "get",
    response: () => {
      return {
        code: 200,
        data: Mock.mock({
          "PersonList|11": [
            {
              name: "@cname",
              "age|12-80": 12,
              list1: "@csentence(5, 25)",
              list2: Mock.mock({
                "number|1-100": 100
              }),
              "list3|2-4": [
                {
                  "item|1": "@csentence(5, 25)"
                }
              ]
            }
          ]
        }),
        info: ""
      };
    }
  },
  {
    url: "/api/getObject",
    method: "get",
    response: () => {
      return {
        code: 200,
        data: Mock.mock({
          \u5E03\u5C14\u503C: Mock.Random.boolean(),
          \u6574\u6570: Mock.Random.integer(100, 100293),
          \u5C0F\u6570: Mock.Random.float(1, 34322, 0, 0.234),
          \u5B57\u7B26\u4E32: Mock.Random.string(25),
          \u82F1\u6587\u540D: Mock.Random.name(),
          \u4E2D\u6587\u540D: Mock.Random.cname(),
          \u65E5\u671F: Mock.Random.date(),
          \u65F6\u95F4: Mock.Random.time()
        }),
        message: "\u83B7\u53D6 1 ~ 10000 \u968F\u673A\u6570\u636E\u6210\u529F\uFF01",
        info: ""
      };
    }
  },
  {
    url: "/api/getNumber",
    method: "get",
    response: () => {
      return {
        code: 200,
        data: Mock.mock({
          "number|123.1-10": 1
        }),
        message: "\u83B7\u53D6 1 ~ 10000 \u968F\u673A\u6570\u636E\u6210\u529F\uFF01",
        info: ""
      };
    }
  },
  {
    url: "/api/getNull",
    method: "get",
    response: () => {
      return {
        code: 200,
        data: "",
        message: "\u83B7\u53D6 1 ~ 10000 \u968F\u673A\u6570\u636E\u6210\u529F\uFF01",
        info: ""
      };
    }
  },
  {
    url: "/api/getAny",
    method: "get",
    response: () => {
      return {
        code: 200,
        data: Mock.mock("@paragraph()"),
        message: "\u83B7\u53D6 1 ~ 10000 \u968F\u673A\u6570\u636E\u6210\u529F\uFF01",
        info: ""
      };
    }
  }
];
export {
  getInfo_default as default
};
//# sourceMappingURL=data:application/json;base64,
